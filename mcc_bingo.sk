variables:
	{mcc.bingo.inprogress} = false
	{mcc.bingo.timeleft} = 0
	{mcc.bingo.stage} = 0
	{bingoclosecooldown.%player%} = false

function checkbingo(p:player):
	loop 4 times:
		loop 4 times:
			if {_p} has {bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%}:
				if {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%{mcc.team.%{_p}%}%} is false:
					set {_oldbingos} to mccbingos({mcc.team.%{_p}%})
					set {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%{mcc.team.%{_p}%}%} to true
					remove {bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%} from {_p} 
					set {_countbad} to 0
					loop 10 times:
						if {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%loop-number-3%} is true:
							add 1 to {_countbad}
					broadcast "<light blue>[Bingo] %{mcc.teams::%{mcc.team.%{_p}%}%}% <white>were the <light blue>%nth({_countbad})%<white> to find %{bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%}%!"
					set {_newbingos} to mccbingos({mcc.team.%{_p}%})-{_oldbingos}
					if {_newbingos} is equal to 0:
						ac({_p}, 144-9*{_countbad}, "Found an item!", false)
					else:
						set {_count} to 0
						loop all players:
							if {mcc.team.%loop-player's name%} is equal to {mcc.team.%{_p}%}:
								add 1 to {_count}
						set {_bla} to ceil(350/{_count}) 
						ac({_p}, 144-9*{_countbad}+{_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true) 
						loop all players:
							if {mcc.team.%loop-player's name%} is equal to {mcc.team.%{_p}%}:
								if loop-player is not equal to {_p}:
									ac(loop-player, {_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true)

function bingostatus(r: number, c: number, team: number) :: number:
	# 0: unclaimed, 1: team found, -1: enemy found
	if {mcc.bingo.hasfound.%{_r}%.%{_c}%.%{_team}%} is true:
		return 1
	if {bingo.tictactoe} is false:
		return 0
	else:
		loop 10 times:
			if {mcc.bingo.hasfound.%{_r}%.%{_c}%.%loop-number%} is true:
				return -1	
	return 0

function mccbingotutorial(p:player):
	wait 3 seconds
	send title "<yellow>Bingo But Fast" to {_p} for 5 seconds
	wait 5 seconds
	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<yellow>Welcome to Bingo But Fast!" to {_p}
	send "" to {_p}
	send "<italics>Here's how you play..." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 3 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>Bingo But Fast is a Minecraft scavenger hunt!" to {_p}
	send "" to {_p}
	send "Your goal is to collect the items shown on your <gold>Bingo Card<white> before time runs out!" to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 5 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>You earn coins for each item found, and every <gold>bingo<white> (complete row, column, or long diagonal)." to {_p}
	send "" to {_p}
	send "Coordination is key! You can also track other players, but keep inventory is on, so you can't steal their stuff." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 8 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>One member of your team may teleport to another once every 5 minutes!" to {_p}
	send "" to {_p}
	send "Use this ability wisely! Teleport using /teamtp [teammate]." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}


function mccbingos(t:number) :: number:
	set {_bingos} to 0
	loop 4 times:
		if {mcc.bingo.hasfound.%loop-number%.1.%{_t}%} is true:
			if {mcc.bingo.hasfound.%loop-number%.2.%{_t}%} is true:
				if {mcc.bingo.hasfound.%loop-number%.3.%{_t}%} is true:
					if {mcc.bingo.hasfound.%loop-number%.4.%{_t}%} is true:
						add 1 to {_bingos}
	loop 4 times:
		if {mcc.bingo.hasfound.1.%loop-number%.%{_t}%} is true:
			if {mcc.bingo.hasfound.2.%loop-number%.%{_t}%} is true:
				if {mcc.bingo.hasfound.3.%loop-number%.%{_t}%} is true:
					if {mcc.bingo.hasfound.4.%loop-number%.%{_t}%} is true:
						add 1 to {_bingos}
	if {mcc.bingo.hasfound.1.1.%{_t}%} is true:
		if {mcc.bingo.hasfound.2.2.%{_t}%} is true:
			if {mcc.bingo.hasfound.3.3.%{_t}%} is true:
				if {mcc.bingo.hasfound.4.4.%{_t}%} is true:
					add 1 to {_bingos}
	if {mcc.bingo.hasfound.1.4.%{_t}%} is true:
		if {mcc.bingo.hasfound.2.3.%{_t}%} is true:
			if {mcc.bingo.hasfound.3.2.%{_t}%} is true:
				if {mcc.bingo.hasfound.4.1.%{_t}%} is true:
					add 1 to {_bingos}
	return {_bingos}
	
# on join:
# 	wait 2 seconds
# 	if {mcc.currentevent} is "bingobutfast":
# 		if {mcc.team.%player's name%} is not 0:
# 			execute console command "/mv tp %player% bingo_ttt"
# 			set {bingoclosecooldown.%player's name%} to false
# 			if "%player's world%" is equal to "bingo_ttt":
# 				set {immune.%player's name%} to false
# 				wait a tick
# 				set player's game mode to survival
# 				clear the player's inventory
# 				set the player's helmet to iron helmet of unbreaking 10
# 				set the player's chestplate to iron chestplate of unbreaking 10
# 				set the player's leggings to iron leggings of unbreaking 10
# 				set the player's boots to iron boots of unbreaking 10
# 				give an iron sword of sharpness 2 and unbreaking 10 to player
# 				give an iron axe of efficiency 3 and unbreaking 10 to player
# 				give an iron shovel of efficiency 3 and unbreaking 10 to player
# 				give an iron pickaxe of efficiency 3 and unbreaking 10 to player
# 				give 64 steak to player
# 				give a white bed to player
# 				set slot 7 of player's inventory to compass of curse of vanishing named "<gold>Tracking Compass"
# 				set slot 8 of player's inventory to paper of curse of vanishing named "<gold>Bingo Card"
# 				apply speed 2 to the player for 20 minutes
# 				mccbingotutorial(player)
command /mccbingobutfast:
	permission: op
	trigger:
		if command sender is not the console:
			if {mmcc.hoster.%command sender%} isn't true:
				message "<pink>You cannot do this!"
				exit trigger
		
		execute console command "/mccnewgame"
		set {mcc.bingo.inprogress} to true
		set {mcc.currentevent} to "bingobutfast"
		loop 4 times:
			loop 4 times:
				loop 10 times:
					set {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%loop-number-3%} to false
		set {bingo.tictactoe} to false
		loop all players:
			if {mcc.team.%loop-player's name%} is not equal to 0:
				execute console command "/mv tp %loop-player% bingo_ttt"
				set {bingoclosecooldown.%loop-player's name%} to false
				if "%loop-player's world%" is equal to "bingo_ttt":
					set {immune.%loop-player's name%} to false
					wait a tick
					set loop-player's game mode to survival
					clear the loop-player's inventory
					set the loop-player's helmet to iron helmet of unbreaking 10
					set the loop-player's chestplate to elytra of unbreaking 10
					set the loop-player's leggings to iron leggings of unbreaking 10
					set the loop-player's boots to iron boots of unbreaking 10
					give an iron sword of sharpness 2 and unbreaking 10 to loop-player
					give an iron axe of efficiency 3 and unbreaking 10 to loop-player
					give an iron shovel of efficiency 3 and unbreaking 10 to loop-player
					give an iron pickaxe of efficiency 3 and unbreaking 10 to loop-player
					give 64 steak to loop-player
					give a white bed to loop-player
					set slot 7 of loop-player's inventory to compass of curse of vanishing named "<gold>Tracking Compass"
					set slot 8 of loop-player's inventory to paper of curse of vanishing named "<gold>Bingo Card"
					apply speed 2 to the loop-player for 20 minutes
					mccbingotutorial(loop-player)
		loop 10 times:
			set {mcc.bingo.tpcooldown.%loop-number%} to 0
		set {mcc.bingo.stage} to 0
		set {mcc.bingo.timeleft} to 60
		delete {mcc.bingo.items::*}
		loop 4 times:
			loop 4 times:
				add {bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%} to {mcc.bingo.items::*}	

command /bingoresetcard:
	trigger:
		if command sender is "itsasquid2":
			loop 4 times:
				loop 4 times:
					loop 10 times:
						set {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%loop-number-3%} to false

on rightclick:
	player's tool is paper of curse of vanishing named "<gold>Bingo Card"
	{mcc.team.%player's name%} is not equal to 0
	set {_cardgui} to a new chest inventory with 6 row with name "Bingo Card"
	loop 54 times:
		set slot (loop-value)-1 of {_cardgui} to black stained glass pane
	loop 4 times:
		loop 4 times:
			set {_bla} to bingostatus(loop-number-1, loop-number-2, {mcc.team.%player's name%})
			# if {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%{mcc.team.%player's name%}%} is true:
			if {_bla} is equal to 1:
				set slot 1+(loop-value-1)*9+(loop-value-2) of {_cardgui} to blue stained glass pane named "<blue>Your team found this item!"
			else if {_bla} is equal to 0:
				set slot 1+(loop-value-1)*9+(loop-value-2) of {_cardgui} to {bingo.objectives::%{bingottt.board.%loop-value-1%.%loop-value-2%}%}
			else:
				set slot 1+(loop-value-1)*9+(loop-value-2) of {_cardgui} to red stained glass pane named "<pink>Enemy team found this item!"
	set slot 16 of {_cardgui} to ender pearl named "<gold>Teleport to team" with lore "<gray>Usable once every 5 minutes"
	#set slot 34 of {_cardgui} to compass named "<gold>Super Radar" with lore "<gray>Reveals the coordinates of all enemy team members. Usable once per game."
	#set slot 43 of {_cardgui} to eye of ender named "<gold>Intel Report" with lore "<gray>Peek at one enemy team member's inventory. Usable once per game."
	open {_cardgui} to the player

on inventory click:
	if name of event-inventory is "Bingo Card":
		if index of event-slot is equal to 16:
			message "<light blue>[Bingo] You may teleport to a teammate using /teamtp [playername]. One team member may use this every 5 minutes!"
		cancel event

on damage:
	attacker is a player
	victim is a player
	attacker's world is equal to "bingo_ttt"
	{mcc.bingo.timeleft} is greater than 0
	{mcc.bingo.stage} is equal to 0
	send "<pink>You cannot attack other players during the Bingo tutorial!" to attacker
	cancel event



every second:
	if {mcc.bingo.timeleft} is greater than 0:
		if {mcc.paused} is true:
			exit trigger
		loop 10 times:
			if {mcc.bingo.tpcooldown.%loop-number%} is greater than 0:
				subtract 1 from {mcc.bingo.tpcooldown.%loop-number%}
		subtract 1 from {mcc.bingo.timeleft}
		if {mcc.bingo.timeleft} is equal to 3:
			if {mcc.bingo.stage} is equal to 0:
				loop all players:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						execute console command "/boopboopboopbeep %loop-player%"
		else if {mcc.bingo.timeleft} is less than or equal to 0:
			if {mcc.bingo.stage} is equal to 0:
				set {mcc.bingo.timeleft} to 600 
				set {mcc.bingo.stage} to 1
				execute console command "/playmusic bingobutfast"
				loop all players:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						set loop-player's game mode to survival
						loop blocks in radius 3 of loop-player:
							if loop-block is minecraft:barrier:
								set loop-block to air
			else if {mcc.bingo.stage} is equal to 1:
				loop all players:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						send title "<pink>Game over!" to loop-player for 3 seconds
				set {mcc.bingo.inprogress} to false
				set {mcc.bingo.timeleft} to 30
				set {mcc.bingo.stage} to 2
				execute console command "/playmusic none"
				execute console command "/mccstandings"					
			else if {mcc.bingo.stage} is equal to 2:
				execute console command "/mccbreak"
				set {mcc.bingo.timeleft} to -1
		else if {mcc.bingo.timeleft} is 284:
			execute console command "/playmusic bingobutfast"
		loop all players in "bingo_ttt" and "bingo_ttt_nether":
			if {mcc.team.%loop-player's name%} is not equal to 0:
#				loop 4 times:
#					loop 4 times:
#						if loop-player has {bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%}:
#							if {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%{mcc.team.%loop-player's name%}%} is false:
#								set {_oldbingos} to mccbingos({mcc.team.%loop-player's name%})
#								set {mcc.bingo.hasfound.%loop-number-1%.%loop-number-2%.%{mcc.team.%loop-player's name%}%} to true
#								remove {bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%} from loop-player
#								broadcast "<light blue>[Bingo] %{mcc.teams::%{mcc.team.%loop-player's name%}%}% <white>have found %{bingo.objectives::%{bingottt.board.%loop-number-1%.%loop-number-2%}%}%!"
#								set {_newbingos} to mccbingos({mcc.team.%loop-player's name%})-{_oldbingos}
#								if {_newbingos} is equal to 0:
#									ac(loop-player, 75, "Found an item!", false)
#								else:
#									set {_count} to 0
#									loop all players:
#										if {mcc.team.%loop-player-2%} is equal to {mcc.team.%loop-player-1%}:
#											add 1 to {_count}
#									set {_bla} to ceil(250/{_count}) 
#									ac(loop-player, 75+{_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true) 
#									loop all players:
#										if {mcc.team.%loop-player-2%} is equal to {mcc.team.%loop-player-1%}:
#											if loop-player-2 is not equal to loop-player-1:
#												ac(loop-player-2, {_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true)


command /teamtp <player>:
	trigger:
		if {mcc.currentevent} is not equal to "bingobutfast" or "bingoisland":
			message "<pink>You can only use this command during Bingo!"
			exit trigger
		if {mcc.team.%player's name%} is equal to 0:
			message "<pink>This command is only for MCC players!"
			exit trigger
		if {mcc.bingo.tpcooldown.%{mcc.team.%player's name%}%} is greater than 0:
			message "<pink>You must wait %time({mcc.bingo.tpcooldown.%{mcc.team.%player's name%}%})% <pink>to use this again!"	
			exit trigger
		if {mcc.team.%arg 1%} is not equal to {mcc.team.%player's name%}:
			message "<pink>%arg 1% <pink>is not on your team!"
			exit trigger
		teleport player to arg 1
		set {mcc.bingo.tpcooldown.%{mcc.team.%player's name%}%} to 180


#on pickup:
#	{mcc.currentevent} is equal to "bingobutfast"
#	{mcc.team.%player's name%} is not equal to 0
#	{mcc.bingo.stage} is equal to 1
#	event-item is not dirt
#	event-item is not cobblestone
#	event-item is not netherrack
#	{mcc.bingo.items::*} contains type of event-item 
#	wait a tick
#	checkbingo(player)	

on swap hand items:
	{mcc.currentevent} is equal to "bingobutfast" or "bingoisland"
	{mcc.team.%player's name%} is not equal to 0
	if player's tool is paper of curse of vanishing:
		cancel event

on inventory close:
	{mcc.currentevent} is equal to "bingobutfast" or "bingoisland"
	{mcc.team.%player's name%} is not equal to 0
	if slot 8 of player is not paper of curse of vanishing:
		loop numbers from 9 to 35:
			if slot loop-number of player is paper of curse of vanishing:
				set slot loop-number of player to slot 8 of player 
				set slot 8 of player to paper of curse of vanishing named "<gold>Bingo Card" 
#	{bingoclosecooldown.%player's name%} is false
#	checkbingo(player)
#	set {bingoclosecooldown.%player's name%} to true
#	wait 3 seconds
#	set {bingoclosecooldown.%player's name%} to false 

command /givecard <player>:
	permission: op
	trigger:
		if {mmcc.hoster.%command sender%} isn't true:
			message "<pink>You do not have permission to run this command!"
			exit trigger
		give a paper of curse of vanishing named "<gold>Bingo Card" to arg 1


on death of player:
	"%victim's world%" is equal to "bingo_ttt"
	wait 5 seconds
	#apply speed 2 to the victim for 15 minutes

on drop:
	event-item is paper of curse of vanishing named "<gold>Bingo Card"
	message "<pink>You might want to keep that!" to event-player
	cancel event


on inventory click:
	name of event-inventory is "Bingo Card"
	event-slot is not black stained glass pane
	event-slot is not blue stained glass pane or ender pearl named "<gold>Teleport to team"
	event-inventory's amount of rows is 6
	if player has event-slot:
		set {_col} to mod(index of event-slot, 9) - 1
		set {_row} to (index of event-slot - {_col} - 1)/9
		#if {mcc.bingo.hasfound.%{_row}%.%{_col}%.%{mcc.team.%player's name%}%} is false:
		if bingostatus({_row}, {_col}, {mcc.team.%player's name%}) is equal to 0:
			set {_oldbingos} to mccbingos({mcc.team.%player's name%})
			set {mcc.bingo.hasfound.%{_row}%.%{_col}%.%{mcc.team.%player's name%}%} to true
			remove {bingo.objectives::%{bingottt.board.%{_row}%.%{_col}%}%} from player 
			set {_countbad} to 0
			loop 10 times:
				if {mcc.bingo.hasfound.%{_row}%.%{_col}%.%loop-number%} is true:
					add 1 to {_countbad}
			broadcast "<light blue>[Bingo] %{mcc.teams::%{mcc.team.%player's name%}%}% <white>were the <light blue>%nth({_countbad})%<white> to find %{bingo.objectives::%{bingottt.board.%{_row}%.%{_col}%}%}%!"
			set {_newbingos} to mccbingos({mcc.team.%player's name%})-{_oldbingos}
			set event-slot to blue stained glass pane named "<blue>Your team found this item!"
			if {_newbingos} is equal to 0:
				ac(player, 144-9*{_countbad}, "Found an item!", false)
			else:
				set {_count} to 0
				loop all players:
					if {mcc.team.%loop-player's name%} is equal to {mcc.team.%player's name%}:
						add 1 to {_count}
				set {_bla} to ceil(350/{_count}) 
				ac(player, 144-9*{_countbad}+{_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true) 
				loop all players:
					if {mcc.team.%loop-player's name%} is equal to {mcc.team.%player's name%}:
						if loop-player is not equal to player:
							ac(loop-player, {_bla}*{_newbingos}, "Scored %{_newbingos}% bingos!", true)
		else:
			message "<pink>Your team has already found this item!"

on pick up:
	if event-player's world is "bingo_ttt":
		if event-item is raw iron:
			wait 5 ticks
			remove 1 raw iron from event-player
			give event-player iron ingot
		if event-item is raw gold:
			wait 5 ticks
			give event-player gold ingot
			remove 1 raw gold from event-player
		if event-item is raw copper:
			wait 5 ticks
			give event-player copper ingot
			remove 1 raw copper from event-player
			

on spawn:
	if "%event-world%" starts with "bingo":

		if spawn reason = natural:
			cancel event