variables:
	{mcc.rsr.ammo.%player%} = 9 


# Each map has a name
# {mcc.rsr.spawnperiod.(map name)}: number of seconds between new terrain
# {mcc.rsr.mapsperstage.(map name)}: number of different maps per each stage
# {mcc.rsr.radius.(map name)}: distance between centers of terrain
# {mcc.rsr.thetamax.(map name)}: maximum theta for new terrain
# 4 stages: getting progressively smaller each stage
on join:
	set {rsrplaying.player} to false
#temp command
command /rsrloaddata:
	permission: op
	trigger:
		if {superop.%player's name%} is false:
			message "<pink>You do not have permission to run this command!"
			exit trigger

		set {mcc.rsr.map.1} to "1"
		set {mcc.rsr.map.2} to "2"
		set {mcc.rsr.map.3} to "3"
        
		set {mcc.rsr.num_stages.%{mcc.rsr.map.1}%} to 3

		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.1}%} to 30
		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.2}%} to 30
		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.3}%} to 30

		set {mcc.rsr.mapsperstage.%{mcc.rsr.map.1}%} to 3
		set {mcc.rsr.mapsperstage.%{mcc.rsr.map.2}%} to 3
		set {mcc.rsr.mapsperstage.%{mcc.rsr.map.3}%} to 3

		set {mcc.rsr.radius.%{mcc.rsr.map.1}%} to 40
		set {mcc.rsr.radius.%{mcc.rsr.map.2}%} to 40
		set {mcc.rsr.radius.%{mcc.rsr.map.3}%} to 40

		set {mcc.rsr.thetamax.%{mcc.rsr.map.1}%} to 180
		set {mcc.rsr.thetamax.%{mcc.rsr.map.2}%} to 180
		set {mcc.rsr.thetamax.%{mcc.rsr.map.3}%} to 180

		message "<green>Loaded Rocket Spleef Rush data (temp command)"

command /resetrsrworld:
	permission: op
	trigger:
		if player is not "itsasquid2":
			if player is not "MiniMCC":
				if command sender is not a command block:
					if command sender is not the console:
						message "<pink>You do not have permission to run this command!"
						exit trigger
		execute console command "/mv delete rocketspleefrush"
		execute console command "/mv confirm"
		execute console command "/mv create rocketspleefrush NORMAL -g VoidGenerator -t flat"
		execute console command "/mccrsrpod true"
		execute console command "/mv setspawn rocketspleefrush 0 0 0"
		execute console command "/mv gamerule doDaylightCycle false rocketspleefrush"
		execute console command "/mv gamerule doWeatherCycle false rocketspleefrush"

function rsrstage() :: number:
	if {mcc.rsr.stage} is equal to 1:
		return min(1 + floor((240-{mcc.rsr.timeleft})/60) + floor((40-{mcc.rsr.playersleft})/15), 4) 
	return 1

function flasharrow(x: number, y: number, z: number):
	loop all players:
		if {rsrinprogress} is true:
			if {rsrplaying.%loop-player's name%} is true:
				if {mcc.team.%loop-player's name%} is not equal to 0:
					send "<pink>New terrain is spawning! The current terrain will disintegrate soon!" to loop-player
		else:
			if {mcc.team.%loop-player's name%} is not equal to 0:
				send "<pink>New terrain is spawning! The current terrain will disintegrate soon!" to loop-player
	execute console command "/schempaste rsr_arrow rocketspleefrush %{_x}% %{_y}% %{_z}%"
	set {_bla} to location({_x}, {_y}+3, {_z}, world "rocketspleefrush")
	loop 5 times:
		loop all players:
			if {rsrinprogress} is true:
				if {rsrplaying.%loop-player's name%} is true:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						play sound "BLOCK_NOTE_BLOCK_PLING" with volume 100 at pitch sqrt(2) for loop-player from {_bla} 
			else:
				if {mcc.team.%loop-player's name%} is not equal to 0:
					play sound "BLOCK_NOTE_BLOCK_PLING" with volume 100 at pitch sqrt(2) for loop-player from {_bla} 
		wait 0.7 seconds
	loop blocks in radius 7 of {_bla}:
		set loop-block to air
			

function genterrain(x: number, y: number, z: number):
	set {_stage} to rsrstage()
	if {mcc.rsr.num_stages.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%} is set:
		set {_stage} to min({_stage}, {mcc.rsr.num_stages.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%})
    
	set {_bla} to {mcc.rsr.mapsperstage.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}
	if {_bla} is not equal to 3:
		if {_stage} is equal to 4:
			if {_bla} is less than 4:
				set {_bla} to 3
	#set {_rand} to a random integer between 1 and {mcc.rsr.mapsperstage.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}
	set {_rand} to a random integer between 1 and {_bla}
	set {_count} to 1
	while {mcc.rsr.already::*} contains {_rand}:
		#set {_rand} to a random integer between 1 and {mcc.rsr.mapsperstage.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}
		set {_rand} to a random integer between 1 and {_bla}
		add 1 to {_count}
		if {_count} is greater than 30:
			delete {mcc.rsr.already::*}	
	execute console command "/schempaste rsr_%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%_%{_stage}%_%{_rand}% rocketspleefrush %{_x}% %{_y}% %{_z}%"

	if {_stage} is equal to {mcc.rsr.oldstage}:
		add {_rand} to {mcc.rsr.already::*}
	else:
		set {mcc.rsr.oldstage} to {_stage}
		delete {mcc.rsr.already::*}
		

function mccrocketspleefrushtutorial(p:player):
	wait 3 seconds
	send title "<yellow>Rocket Spleef Rush" to {_p} for 5 seconds
	wait 5 seconds
	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<yellow>Welcome to Rocket Spleef Rush!" to {_p}
	send "" to {_p}
	send "<italics>Here's how you play..." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 3 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>In Rocket Spleef Rush, your aim is to remain last player standing." to {_p}
	send "" to {_p}
	send "Do this by staying on terrain and eliminating enemy players." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 6 seconds


	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>All players are armed with rocket cannons with a clip size of 3." to {_p}
	send "" to {_p}
	send "Right clicking will fire a rocket." to {_p}
	send "" to {_p}
	send "Rockets destroy terrain and knockback players!" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 12 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "New terrain will keep spawning throughout the match, and old terrain will disintegrate." to {_p}
	send "" to {_p}
	send "" to {_p}
	send "<yellow>Listen out for an audio cue and a large arrow that will mark out the next spawn location." to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 12 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<bold>You are equipped with an elytra and 1 updraft." to {_p}
	send "The updraft is best used during elytra flight." to {_p}
	send "" to {_p}
	send "This will propel you upwards, and most likely save you from falling to your death." to {_p}
	send "<gray>The updraft is taken away half way through the round." to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}

	wait 12 seconds

	send "<lime>--------------------------------------------------" to {_p}
	send "" to {_p}
	send "<yellow><bold>Extra Tips:" to {_p}
	send "- When shooting the floor, you can use your own rockets to propel yourself upwards and to higher ground." to {_p}
	send "" to {_p}
	send "- The meelee attack on your rocket cannon has high knockback. Use it in tighter fights!" to {_p}
	send "" to {_p}
	send "<lime>--------------------------------------------------" to {_p}



function mccrsrdisintegrate(x: number, y: number, z: number):
	set {_l} to location({_x}, {_y}, {_z}, world "rocketspleefrush")
	loop 7 times:
		# broadcast {_l}
		loop blocks in radius {mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%} around {_l}:
			if {mcc.rsr.suddendeath} is true:
				chance of 80%:
					set loop-block to air
			else:
				chance of 50%:
					set loop-block to air
		wait 0.5 seconds
	
	loop blocks in radius {mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%} around {_l}:
		set loop-block to air

command /mccrsrpod <boolean>:
	trigger:
		if command sender is not the console:
			if {mmcc.hoster.%command sender%} isn't true:
				if command sender is not "MiniMCC":
					message "<pink>You do not have permission to run this command!"
					exit trigger
		mccrsrpod(arg 1)	

function mccrsrpod(b:boolean):
	if {_b} is true:
		execute console command "/schempaste rocket_spleef_rush_pod rocketspleefrush 0 0 0"
	else:
		loop numbers from -16.5 to 16.5:
			loop numbers from -0.5 to 12.5:
				loop numbers from -16.5 to 16.5:
					set the block at location(loop-number-1, loop-number-2, loop-number-3, world "rocketspleefrush") to air
			

function mccrsrdead(p: player):
	set {mcc.rsr.place.%{_p}%} to {mcc.rsr.playersleft}
	subtract 1 from {mcc.rsr.playersleft}
	set {_p}'s game mode to spectator 
	if {mcc.rsr.hitby.%{_p}%} is not set:
		broadcast "%mccname({_p})%<gray> fell off the map and eliminated themselves!"
	else if {mcc.rsr.hitby.%{_p}%} is equal to {_p}:
		broadcast "%mccname({_p})%<gray> fell off the map and eliminated themselves!"
	else if {mcc.team.%{mcc.rsr.hitby.%{_p}%}%} is equal to {mcc.team.%{_p}%}:
		broadcast "%mccname({_p})%<gray> was eliminated by their teammate, %mccname({mcc.rsr.hitby.%{_p}%})%<gray>. What a knucklehead!"
	else:
		broadcast "%mccname({_p})%<gray> was eliminated by %mccname({mcc.rsr.hitby.%{_p}%})%!"
		ac({mcc.rsr.hitby.%{_p}%}, 30, "You killed %{_p}%!", false)
		youkilled({mcc.rsr.hitby.%{_p}%},{_p})
	loop all players in "rocketspleefrush":
		
		if {mcc.team.%loop-player's name%} is not equal to 0:
			if loop-player's game mode is adventure:
				bac(loop-player, 2, "Survived 1 place")
	teleport {_p} to the location 40 meters above {_p}'s location
	if mccrsrover() is true:
		set {mcc.rsr.timeleft} to 0

function mccrsrover() :: boolean:
	if {mcc.inprogress} is true:
		set {_team} to 0
		loop all players in "rocketspleefrush":
			if {mcc.team.%loop-player's name%} is not equal to 0:
				if loop-player's game mode is adventure:
					if {_team} is equal to 0:
						set {_team} to {mcc.team.%loop-player's name%}
					else if {_team} is not equal to {mcc.team.%loop-player's name%}:
						# broadcast {_team}
						# broadcast {mcc.team.%loop-player's name%}
						return false
		return true


on rightclick:
	player's world is "rocketspleefrush"
	player's tool is golden shovel
	
	if {mcc.currentevent} is "rocketspleefrush":
		if {mcc.rsr.stage} is not equal to 1:
			message "<pink>You may not use the rocket launcher now!" to event-player
			exit trigger	
	repair tool of player
	if {mcc.rsr.ammo.%player's name%} is greater than or equal to 3:
		if {mcc.rsr.cooldown.%player's name%} is false:
			
			shoot a fireball
			if {mcc.rocketspleefrush.trackarrowsshot} is true:
				add 1 to {mcc.rocketspleefrush.arrowsshot::%player%}
			subtract 3 from {mcc.rsr.ammo.%player's name%}
			set {mcc.rsr.cooldown.%player's name%} to true
			wait 1 second
			set {mcc.rsr.cooldown.%player's name%} to false 



on drop of golden shovel:
	event-world is "rocketspleefrush"
	message "<pink>You might want to keep that!" to event-player
	cancel event

every second:
	loop all players in world "rocketspleefrush":
		if {mcc.rsr.ammo.%loop-player's name%} is less than 9:
			add 1 to {mcc.rsr.ammo.%loop-player's name%}
			if {mcc.rsr.ammo.%loop-player's name%} is equal to 1:
				send action bar "<pink>Reloading.. (0/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 2:
				send action bar "<pink>Reloading... (0/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 3:
				send action bar "<orange>Reloading. (1/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 4:
				send action bar "<orange>Reloading.. (1/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 5:
				send action bar "<orange>Reloading... (1/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 6:
				send action bar "<yellow>Reloading. (2/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 7:
				send action bar "<yellow>Reloading.. (2/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 8:
				send action bar "<yellow>Reloading... (2/3)" to loop-player
			else if {mcc.rsr.ammo.%loop-player's name%} is equal to 9:
				send action bar "<lime>Reloaded! (3/3)" to loop-player
		else:
			send action bar "" to loop-player

on shoot:
	event-world is "rocketspleefrush"
	event-projectile is a large fireball
	add "rsr" to the scoreboard tags of the event-projectile

on projectile hit:
	event-world is "rocketspleefrush"
	if event-projectile has the scoreboard tags "rsr":
		create an explosion of force 3

on spawn:
	event-world is "rocketspleefrush"
	event-entity is not large fireball or firework rocket
	cancel event 
	

on damage:
	victim's world is "rocketspleefrush"
	if damage cause is not void:
		set damage to 0.01
		set victim's health to 10
		if attacker is a player:
			set {mcc.rsr.hitby.%victim%} to attacker

on gliding state change:
	world is "rocketspleefrush"
	if event-player is gliding:
		disenchant event-player's chestplate
	else:
		enchant event-player's chestplate with blast protection 4

on rightclick:
	player's tool is feather of unbreaking 10 named "Updraft"
	if {mcc.currentevent} is "rocketspleefrush":
		if {mcc.rsr.stage} is not equal to 1:
			message "<pink>You may not use the updraft now!" to event-player
			exit trigger	
	set the player's tool to air
	if player's gliding state is true:
		loop 10 times:
			push the player upward with speed 0.1
			wait 0.1 seconds
	else:
		loop 20 times:
			push the player upward with speed 0.2
			wait 0.1 seconds



on rightclick:
	player's tool is firework rocket 
	if {mcc.currentevent} is "rocketspleefrush":
		if {mcc.rsr.stage} is not equal to 1:
			message "<pink>You may not use the updraft now!" to event-player
			cancel event	


command /rsr <player>:
	permission: op
	trigger:
		if command sender is not the console:
			if {mmcc.hoster.%command sender%} isn't true:
				message "<pink>You do not have permission to run this command!"
				exit trigger
		set arg 1's chestplate to unbreakable elytra
		set slot 0 of arg to unbreakable golden shovel of unbreaking 10 and knockback 1 named "Rocket Launcher"
		set slot 1 of arg to a firework rocket
		#give a feather of unbreaking 10 named "Updraft" to arg 1


on hunger bar change:
	if player's world is "rocketspleefrush":
		cancel event

command /mccrocketspleefrush:
	trigger:
		if command sender is not the console:
			if {mmcc.hoster.%command sender%} isn't true:
				if command sender is not "MiniMCC":
					if command sender is not "notcbop":
						if command sender is not a command block:
							message "<pink>You do not have permission to run this command!"
							exit trigger
		# if command sender is a command block:
		# 	set {idk} to "<none>"
		# 	loop all players:
		# 		if "%loop-player's world%" is "rocketspleefrush":
		# 			broadcast "player in world"
		# 			set {idk} to "e"
		# 	if "%{idk}%" is "<none>":
		# 		set {rsrinprogress} to false
		# 	if {rsrinprogress} is false:
		# 		delete {rsrplaying}
		# 		loop all players:
		# 			set {rsrplaying.%loop-player's name%} to false
		# 			if block below loop-player is red glazed terracotta:
		# 				set {rsrplaying.%loop-player's name%} to true
		# 				set {rsrplaying} to "e"
		# 		if "%{rsrplaying}%" is not "<none>":
		# 			set {rsrinprogress} to true
		# 			execute console command "/mccnewgame"
		# 			set {mcc.currentevent} to "rocketspleefrush"
		# 			set {mcc.rsr.stage} to 0
		# 			set {mcc.rsr.roundnum} to 1
		# 			set {mcc.rsr.timeleft} to 10
		# 			set {mcc.rsr.oldstage} to 0
		# 			genterrain(0, -30, 0)
		# 			set {mcc.rsr.spawnperiod.%{mcc.rsr.map.1}%} to 30
		# 			set {mcc.rsr.spawnperiod.%{mcc.rsr.map.2}%} to 30
		# 			set {mcc.rsr.spawnperiod.%{mcc.rsr.map.3}%} to 30
					
		# 			loop all players:
		# 				if {rsrplaying.%loop-player's name%} is true: 
		# 					if {mcc.team.%loop-player's name%} is not equal to 0:
		# 						execute console command "/mv tp %loop-player% rocketspleefrush"
		# 						#execute console command "/tp @a 0 2 0"
		# 						set {immune.%loop-player's name%} to false
		# 						set {mcc.rsr.ammo.%loop-player's name%} to 9
		# 						set {mcc.rsr.cooldown.%loop-player's name%} to false 
		# 			wait a tick
		# 			loop all players:
		# 				if {rsrplaying.%loop-player's name%} is true:
		# 					if {mcc.team.%loop-player's name%} is not equal to 0:
		# 						clear the loop-player's inventory
		# 						execute console command "/rsr %loop-player%"
		# 						set loop-player's game mode to adventure
		# 						mccrocketspleefrushtutorial(loop-player)	
		# 						set loop-player's hunger to 10
		# 		else:
		# 			broadcast "no one is standing on the red terracotta, the game won't start with 0 players!"
		# 	else:
		# 		broadcast "someone just tried to start rsr, but it was already in progress!"
	
		execute console command "/mccnewgame"
		set {mcc.currentevent} to "rocketspleefrush"
		set {mcc.rsr.stage} to 0
		set {mcc.rsr.roundnum} to 1
		set {mcc.rsr.timeleft} to 90
		set {mcc.rsr.oldstage} to 0
		#execute console command "/resetrsrworld"
		genterrain(0, -30, 0)
		delete {mcc.rocketspleefrush.arrowsshot::*}
		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.1}%} to 30
		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.2}%} to 30
		set {mcc.rsr.spawnperiod.%{mcc.rsr.map.3}%} to 30
		execute console command "/mccrsrpod true"
		loop all players:
			if {mcc.team.%loop-player's name%} is not equal to 0:
				execute console command "/mv tp %loop-player% rocketspleefrush"
				#execute console command "/tp @a 0 2 0"
				set {immune.%loop-player's name%} to false
				set {mcc.rsr.ammo.%loop-player's name%} to 9
				set {mcc.rsr.cooldown.%loop-player's name%} to false 
		wait a tick
		loop all players:
			if {mcc.team.%loop-player's name%} is not equal to 0:
				clear the loop-player's inventory
				execute console command "/rsr %loop-player%"
				set loop-player's game mode to adventure
				mccrocketspleefrushtutorial(loop-player)	
				set loop-player's hunger to 10
			else:
				set loop-player's gamemode to spectator
		
	



command /rocketspleefrushtoggleshottracker <boolean>:
	trigger:
		if {mmcc.hosts::*} contains command sender:
			set {mcc.rocketspleefrush.trackarrowsshot} to arg
			message "Toggled rocket tracking in rocketspleefrush to %arg%"

command /rocketspleefrushviewrocketsshot:
	trigger:
		if {mmcc.hosts::*} contains command sender:
			set {mcc.rocketspleefrush.arrowsshot::*} to sorted {mcc.rocketspleefrush.arrowsshot::*}
			loop {mcc.rocketspleefrush.arrowsshot::*}:
				loop all players:
					if {mcc.rocketspleefrush.arrowsshot::%loop-player%} is equal to loop-value-1:
						message "%loop-player% - %loop-value-1%"

every second:
	if {mcc.paused} is true:
		exit trigger
	if {mcc.rsr.timeleft} is greater than 0:
		# loop all players:
		# 	if {superop.%loop-player's name%} is true:
		# 		send {mcc.rsr.map.%{mcc.rsr.roundnum}%} to loop-player

		subtract 1 from {mcc.rsr.timeleft}
		if {mcc.rsr.timeleft} is equal to 3:
			if {mcc.rsr.stage} is equal to 0:
				loop all players:
					if {rsrinprogress} is true:
						if {rsrplaying.%loop-player's name%} is true:
							if {mcc.team.%loop-player's name%} is not equal to 0:
								execute console command "/boopboopboopbeep %loop-player%"
					else:
						if {mcc.team.%loop-player's name%} is not equal to 0:
							execute console command "/boopboopboopbeep %loop-player%"						 
		else if {mcc.rsr.timeleft} is equal to 20:
			if {mcc.rsr.stage} is equal to 0:
				if {mcc.rsr.roundnum} is equal to 2 or 3:
					
					mccrsrdisintegrate({mcc.rsr.center.x}, {mcc.rsr.center.y}, {mcc.rsr.center.z})
					if abs({mcc.rsr.oldx}) is greater than 30: 
						mccrsrdisintegrate({mcc.rsr.oldx}, {mcc.rsr.oldy}, {mcc.rsr.oldz})
		else if {mcc.rsr.timeleft} is equal to 15:
			if {mcc.rsr.stage} is equal to 0:
				if {mcc.rsr.roundnum} is equal to 2 or 3:
					set {mcc.rsr.radius.%{mcc.rsr.map.1}%} to 40
					set {mcc.rsr.radius.%{mcc.rsr.map.2}%} to 40
					set {mcc.rsr.radius.%{mcc.rsr.map.3}%} to 40
					genterrain(0, -30, 0)
					mccrsrpod(true)
					loop all players:
						if {rsrinprogress} is true:
							if {rsrplaying.%loop-player's name%} is true:
								if {mcc.team.%loop-player's name%} is not equal to 0:
									execute console command "/mv tp %loop-player% rocketspleefrush"
									clear the loop-player's inventory
									execute console command "/rsr %loop-player%"
									set loop-player's game mode to adventure
						else:
							if {mcc.team.%loop-player's name%} is not equal to 0:
								execute console command "/mv tp %loop-player% rocketspleefrush"
								clear the loop-player's inventory
								execute console command "/rsr %loop-player%"
								set loop-player's game mode to adventure
					
		else if {mcc.rsr.timeleft} is equal to 130:
			if {mcc.rsr.stage} is equal to 1:
				loop all players:
					if {rsrinprogress} is true:
						if {rsrplaying.%loop-player's name%} is true:
							if {mcc.team.%loop-player's name%} is not equal to 0:
								send title "" with subtitle "<orange>Updraft taken away in 10 seconds" to loop-player for 3 seconds
					else:
						if {mcc.team.%loop-player's name%} is not equal to 0:
							send title "" with subtitle "<orange>Updraft taken away in 10 seconds" to loop-player for 3 seconds
		else if {mcc.rsr.timeleft} is equal to 120:
			if {mcc.rsr.stage} is equal to 1:
				loop all players:
					if {rsrinprogress} is true:
						if {rsrplaying.%loop-player's name%} is true:
							if {mcc.team.%loop-player's name%} is not equal to 0:
								remove all feathers from the loop-player
								remove all firework rocket from the loop-player
					else:
						if {mcc.team.%loop-player's name%} is not equal to 0:
							remove all feathers from the loop-player
							remove all firework rocket from the loop-player
		else if {mcc.rsr.timeleft} is equal to 36:
			if {mcc.rsr.stage} is equal to 1:
				if {mcc.rsr.roundnum} is equal to 1:
					set {mcc.rsr.spawnperiod.%{mcc.rsr.map.1}%} to 9
					set {mcc.rsr.radius.%{mcc.rsr.map.1}%} to 20
					set {mcc.rsr.suddendeath} to true
					
		
				if {mcc.rsr.roundnum} is equal to 2:
					set {mcc.rsr.spawnperiod.%{mcc.rsr.map.2}%} to 9
					set {mcc.rsr.radius.%{mcc.rsr.map.2}%} to 20
					set {mcc.rsr.suddendeath} to true

				if {mcc.rsr.roundnum} is equal to 3:
					set {mcc.rsr.radius.%{mcc.rsr.map.3}%} to 20
					set {mcc.rsr.spawnperiod.%{mcc.rsr.map.3}%} to 9
					set {mcc.rsr.suddendeath} to true
				loop all players:
					if {rsrinprogress} is true:
						if {rsrplaying.%loop-player's name%} is true:
							send title "<red> Sudden Death!" with subtitle "<pink> Last Platform!" to loop-player for 3 seconds
					else:
						send title "<red> Sudden Death!" with subtitle "<pink> Last Platform!" to loop-player for 3 seconds
				set {mcc.rsr.oldx} to {mcc.rsr.center.x}
				set {mcc.rsr.oldy} to {mcc.rsr.center.y}
				set {mcc.rsr.oldz} to {mcc.rsr.center.z}
				set {mcc.rsr.center.x} to {mcc.rsr.center.x} + floor(2*{mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}*cos({_theta})) 
				set {mcc.rsr.center.z} to {mcc.rsr.center.z} + floor(2*{mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}*sin({_theta})) 
				set {mcc.rsr.center.y} to -60 + floor({mcc.rsr.timeleft}/8) 
				flasharrow({mcc.rsr.center.x}, {mcc.rsr.center.y}, {mcc.rsr.center.z})
				wait 5 seconds
				genterrain({mcc.rsr.center.x}, {mcc.rsr.center.y}, {mcc.rsr.center.z})
		if mod(243-{mcc.rsr.timeleft}, {mcc.rsr.spawnperiod.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}) is equal to 0:
			if {mcc.rsr.stage} is equal to 1:
				if {mcc.rsr.suddendeath} isn't true:
					set {_theta} to a random number between 0 and {mcc.rsr.thetamax.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}
					# if {mcc.rsr.suddendeath} is true:
					# 	mccrsrdisintegrate({mcc.rsr.oldx}, {mcc.rsr.oldy}, {mcc.rsr.oldz})
					set {mcc.rsr.oldx} to {mcc.rsr.center.x}
					set {mcc.rsr.oldy} to {mcc.rsr.center.y}
					set {mcc.rsr.oldz} to {mcc.rsr.center.z}
					set {mcc.rsr.center.x} to {mcc.rsr.center.x} + floor(2*{mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}*cos({_theta})) 
					set {mcc.rsr.center.z} to {mcc.rsr.center.z} + floor(2*{mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}*sin({_theta})) 
					set {mcc.rsr.center.y} to -60 + floor({mcc.rsr.timeleft}/8) 
					flasharrow({mcc.rsr.center.x}, {mcc.rsr.center.y}, {mcc.rsr.center.z})
		else if mod(238-{mcc.rsr.timeleft}, {mcc.rsr.spawnperiod.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}) is equal to 0:
			if {mcc.rsr.timeleft} is less than 230:
				if {mcc.rsr.stage} is equal to 1:
					if {mcc.rsr.suddendeath} isn't true:
						genterrain({mcc.rsr.center.x}, {mcc.rsr.center.y}, {mcc.rsr.center.z})
		else if mod(233-{mcc.rsr.timeleft}, {mcc.rsr.spawnperiod.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%}) is equal to 0:
			if {mcc.rsr.timeleft} is less than 230:
				if {mcc.rsr.stage} is equal to 1:
					if {mcc.rsr.suddendeath} isn't true:
						mccrsrdisintegrate({mcc.rsr.oldx}, {mcc.rsr.oldy}, {mcc.rsr.oldz})
	else if {mcc.rsr.timeleft} is equal to 0:
		if {mcc.rsr.stage} is equal to 0:
			mccrsrpod(false)	
			set {mcc.rsr.stage} to 1
			set {mcc.rsr.timeleft} to 240
			set {mcc.rsr.playersleft} to 0
			set {mcc.rsr.center.x} to 0
			set {mcc.rsr.center.y} to -30 
			set {mcc.rsr.center.z} to 0
			loop all players:
				if {rsrinprogress} is true:
					if {rsrplaying.%loop-player's name%} is true:
						if {mcc.team.%loop-player's name%} is not equal to 0:
							add 1 to {mcc.rsr.playersleft}
							delete {mcc.rsr.hitby.%loop-player's name%}
							set {mcc.rsr.place.%loop-player's name%} to -1
				else:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						add 1 to {mcc.rsr.playersleft}
						delete {mcc.rsr.hitby.%loop-player's name%}
						set {mcc.rsr.place.%loop-player's name%} to -1
			execute console command "/playmusic rocketspleefrush"
		else if {mcc.rsr.stage} is equal to 1:
			set {mcc.rsr.oldstage} to 0
			execute console command "/playmusic none"
			delete {_winners::*}
			set {mcc.rsr.suddendeath} to false
			loop all players:
				if {rsrinprogress} is true:
					if {rsrplaying.%loop-player's name%} is true:
						if {mcc.team.%loop-player's name%} is not equal to 0:
							if {mcc.rsr.roundnum} is equal to 3:
								send title "<pink>Game over!" to loop-player for 3 seconds
							else:
								send title "<pink>Round over!" to loop-player for 3 seconds
							if loop-player's game mode is adventure:
								add mccname(loop-player) to {_winners::*}		
								ac(loop-player, 150, "You survived the entire round!", true)	
							else if {mcc.rsr.place.%loop-player's name%} is not equal to -1:
								if {mcc.rsr.place.%loop-player's name%} is less than or equal to 10:
									ac(loop-player, {mcc.rsr.bonuscoins.%{mcc.rsr.place.%loop-player's name%}%} parsed as number, "You got %nth({mcc.rsr.place.%loop-player's name%})% place!", false)
				else:
					if {mcc.team.%loop-player's name%} is not equal to 0:
						if {mcc.rsr.roundnum} is equal to 3:
							send title "<pink>Game over!" to loop-player for 3 seconds
						else:
							send title "<pink>Round over!" to loop-player for 3 seconds
						if loop-player's game mode is adventure:
							add mccname(loop-player) to {_winners::*}		
							ac(loop-player, 150, "You survived the entire round!", true)	
						else if {mcc.rsr.place.%loop-player's name%} is not equal to -1:
							if {mcc.rsr.place.%loop-player's name%} is less than or equal to 10:
								ac(loop-player, {mcc.rsr.bonuscoins.%{mcc.rsr.place.%loop-player's name%}%} parsed as number, "You got %nth({mcc.rsr.place.%loop-player's name%})% place!", false)
						
			if size of {_winners::*} is equal to 1:
				broadcast "[<gold><bold>Rocket Spleef Rush<reset>] The winner of this round is %{_winners::*}%!"							
			else:
				broadcast "[<gold><bold>Rocket Spleef Rush<reset>] The winners of this round are %{_winners::*}%!"							
			set {mcc.rsr.stage} to 0
			set {mcc.rsr.timeleft} to 30
			if {mcc.rsr.roundnum} is equal to 3:
				execute console command "/mccstandings"
				set {mcc.rsr.stage} to 2
				mccrsrpod(true)
				set {_l} to location({_x}, {_y}, {_z}, world "rocketspleefrush")
				loop blocks in radius {mcc.rsr.radius.%{mcc.rsr.map.%{mcc.rsr.roundnum}%}%} of {_l}:
					set loop-block to air
				
			add 1 to {mcc.rsr.roundnum}	
		else if {mcc.rsr.stage} is equal to 2:
			execute console command "/mccbreak"	
			set {mcc.rsr.timeleft} to -1
			



every second:
	loop all players:
		if loop-player's y-coordinate is less than -70:
			if loop-player's gamemode is adventure:
				if {mcc.currentevent} is "rocketspleefrush":
					if {mcc.rsr.stage} is 1:
						mccrsrdead(loop-player)
		

